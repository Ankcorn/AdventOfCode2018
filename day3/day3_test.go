package day3

import (
	"testing"
)

func TestOverlaps(t *testing.T) {
	input := []string{
		"#1 @ 1,3: 4x4",
		"#2 @ 3,1: 4x4",
		"#3 @ 5,5: 2x2",
	}
	expected := 4
	actual := Overlaps(input)

	if expected != actual {
		t.Errorf("Expected %d to equal %d!", expected, actual)
	}
}

func TestParseClaim(t *testing.T) {
	input := "#1 @ 1,3: 4x4"
	expected := Claim{
		1, 1, 3, 4, 4,
	}

	actual := ParseClaim(input)

	if expected != actual {
		t.Errorf("Expected %d to equal %d!", expected, actual)
	}
}

func TestAddToMap(t *testing.T) {
	ogmap := [][]string{
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
	}
	claim1 := Claim{1, 1, 3, 4, 4}
	expected := [][]string{
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", "1", "1", "1", "1", ".", ".", "."},
		{".", "1", "1", "1", "1", ".", ".", "."},
		{".", "1", "1", "1", "1", ".", ".", "."},
		{".", "1", "1", "1", "1", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
	}
	actual := AddToMap(ogmap, claim1)
	if expected[1][3] != actual[1][3] {
		t.Errorf("Expected %s to equal %s!", expected[1][3], actual[1][3])
	}
}

func TestAddToPopulatedMap(t *testing.T) {
	input := [][]string{
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", "1", "1", "1", "1", ".", ".", "."},
		{".", "1", "1", "1", "1", ".", ".", "."},
		{".", "1", "1", "1", "1", ".", ".", "."},
		{".", "1", "1", "1", "1", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
	}
	claim1 := Claim{1, 1, 3, 4, 4}
	expected := [][]string{
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", "X", "X", "X", "X", ".", ".", "."},
		{".", "X", "X", "X", "X", ".", ".", "."},
		{".", "X", "X", "X", "X", ".", ".", "."},
		{".", "X", "X", "X", "X", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
	}
	actual := AddToMap(input, claim1)
	if expected[1][3] != actual[1][3] {
		t.Errorf("Expected %s to equal %s!", expected[1][3], actual[1][3])
	}
}

func TestCreateMap(t *testing.T) {
	expected := [][]string{
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "."},
	}
	actual := CreateMap(8, 8)
	if len(expected) != len(actual) || len(expected[5]) != len(actual[5]) {
		t.Errorf("Expected %d to equal %d!", len(expected), len(actual))
	}
}
